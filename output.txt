

Start scanning...:

Token: <PREPROCESSOR , #include<stdio.h> >
Token: <PREPROCESSOR , #include<stdbool.h> >
Token: <DATATYPE , int  >
Token: <ID , 0 >
Token: <BRACKET , ( >
Token: <DATATYPE , int  >
Token: <ID , 1 >
Token: <BRACKET , ) >
Token: <SEMI , ; >
Token: <DATATYPE , int  >
Token: <ID , 2 >
Token: <BRACKET , ( >
Token: <DATATYPE , int  >
Token: <ID , 1 >
Token: <BRACKET , ) >
Token: <SEMI , ; >
Token: <DATATYPE , void  >
Token: <ID , 3 >
Token: <BRACKET , ( >
Token: <MACRO , bool >
Token: <ID , 4 >
Token: <BRACKET , ) >
Token: <SEMI , ; >
Token: <DATATYPE , int  >
Token: <ID , 5 >
Token: <ASSIGNMENT_OPERATOR , = >
Token: <NUMBER , 0 >
Token: <SEMI , ; >
Token: <COMMENT , //main function >
Token: <DATATYPE , void  >
Token: <MAIN_FUNCTION , main >
Token: <BRACKET , ( >
Token: <BRACKET , ) >
Token: <OPEN_PARENTHESIS , { >
Token: <DATATYPE , int  >
Token: <ID , 6 >
Token: <SPECIAL_SYMBOL , , >
Token: <ID , 7 >
Token: <SEMI , ; >
Token: <INPUT_OUTPUT , printf("Enter a positive integer:\n") >
Token: <SEMI , ; >
Token: <INPUT_OUTPUT , scanf("%d",&num) >
Token: <SEMI , ; >
Token: <ID , 5 >
Token: <ASSIGNMENT_OPERATOR , = >
Token: <ARITHMETIC_OPERATOR , - >
Token: <ID , 5 >
Token: <SEMI , ; >
Token: <ID , 3 >
Token: <BRACKET , ( >
Token: <MACRO , true >
Token: <BRACKET , ) >
Token: <SEMI , ; >
Token: <KEYWORD , if >
Token: <BRACKET , ( >
Token: <ID , 5 >
Token: <CONDITIONAL_OPERATOR , == >
Token: <NUMBER , 1 >
Token: <BRACKET , ) >
Token: <ID , 7 >
Token: <ASSIGNMENT_OPERATOR , = >
Token: <ID , 0 >
Token: <BRACKET , ( >
Token: <ID , 6 >
Token: <BRACKET , ) >
Token: <SEMI , ; >
Token: <KEYWORD , else if >
Token: <BRACKET , ( >
Token: <ID , 5 >
Token: <CONDITIONAL_OPERATOR , == >
Token: <NUMBER , 0 >
Token: <BRACKET , ) >
Token: <ID , 7 >
Token: <ASSIGNMENT_OPERATOR , = >
Token: <ID , 2 >
Token: <BRACKET , ( >
Token: <ID , 6 >
Token: <BRACKET , ) >
Token: <SEMI , ; >
Token: <INPUT_OUTPUT , printf("result=%d\n",result) >
Token: <SEMI , ; >
Token: <CLOSE_PARENTHESIS , } >
Token: <COMMENT , /*sum function*/ >
Token: <DATATYPE , int  >
Token: <ID , 0 >
Token: <BRACKET , ( >
Token: <DATATYPE , int  >
Token: <ID , 1 >
Token: <BRACKET , ) >
Token: <OPEN_PARENTHESIS , { >
Token: <KEYWORD , if >
Token: <BRACKET , ( >
Token: <ID , 1 >
Token: <CONDITIONAL_OPERATOR , == >
Token: <NUMBER , 0 >
Token: <BRACKET , ) >
Token: <KEYWORD , return >
Token: <ID , 1 >
Token: <SEMI , ; >
Token: <KEYWORD , else >
Token: <KEYWORD , return >
Token: <ID , 1 >
Token: <ARITHMETIC_OPERATOR , + >
Token: <ID , 0 >
Token: <BRACKET , ( >
Token: <ID , 1 >
Token: <ARITHMETIC_OPERATOR , - >
Token: <NUMBER , 1 >
Token: <BRACKET , ) >
Token: <SEMI , ; >
Token: <CLOSE_PARENTHESIS , } >
Token: <COMMENT , //square function >
Token: <DATATYPE , int  >
Token: <ID , 2 >
Token: <BRACKET , ( >
Token: <DATATYPE , int  >
Token: <ID , 1 >
Token: <BRACKET , ) >
Token: <OPEN_PARENTHESIS , { >
Token: <DATATYPE , int  >
Token: <ID , 8 >
Token: <SPECIAL_SYMBOL , , >
Token: <ID , 9 >
Token: <SPECIAL_SYMBOL , , >
Token: <ID , 7 >
Token: <ASSIGNMENT_OPERATOR , = >
Token: <NUMBER , 0 >
Token: <SEMI , ; >
Token: <KEYWORD , for >
Token: <BRACKET , ( >
Token: <ID , 8 >
Token: <ASSIGNMENT_OPERATOR , = >
Token: <NUMBER , 1 >
Token: <SEMI , ; >
Token: <ID , 8 >
Token: <CONDITIONAL_OPERATOR , <= >
Token: <ID , 1 >
Token: <SEMI , ; >
Token: <ID , 8 >
Token: <OTHER_OPERATOR , ++ >
Token: <BRACKET , ) >
Token: <OPEN_PARENTHESIS , { >
Token: <KEYWORD , for >
Token: <BRACKET , ( >
Token: <ID , 9 >
Token: <ASSIGNMENT_OPERATOR , = >
Token: <NUMBER , 1 >
Token: <SEMI , ; >
Token: <ID , 9 >
Token: <CONDITIONAL_OPERATOR , <= >
Token: <ID , 1 >
Token: <SEMI , ; >
Token: <ID , 9 >
Token: <OTHER_OPERATOR , ++ >
Token: <BRACKET , ) >
Token: <OPEN_PARENTHESIS , { >
Token: <ID , 7 >
Token: <ASSIGNMENT_OPERATOR , = >
Token: <ID , 7 >
Token: <ARITHMETIC_OPERATOR , + >
Token: <BRACKET , ( >
Token: <NUMBER , 1 >
Token: <ARITHMETIC_OPERATOR , + >
Token: <NUMBER , 4 >
Token: <ARITHMETIC_OPERATOR , - >
Token: <NUMBER , 2 >
Token: <ARITHMETIC_OPERATOR , * >
Token: <NUMBER , 2 >
Token: <ARITHMETIC_OPERATOR , / >
Token: <NUMBER , 1 >
Token: <BRACKET , ) >
Token: <SEMI , ; >
Token: <CLOSE_PARENTHESIS , } >
Token: <CLOSE_PARENTHESIS , } >
Token: <KEYWORD , return >
Token: <ID , 7 >
Token: <SEMI , ; >
Token: <CLOSE_PARENTHESIS , } >
Token: <COMMENT , //foo function >
Token: <DATATYPE , void  >
Token: <ID , 3 >
Token: <BRACKET , ( >
Token: <MACRO , bool >
Token: <ID , 4 >
Token: <BRACKET , ) >
Token: <OPEN_PARENTHESIS , { >
Token: <KEYWORD , if >
Token: <BRACKET , ( >
Token: <ID , 4 >
Token: <CONDITIONAL_OPERATOR , == >
Token: <MACRO , true >
Token: <BRACKET , ) >
Token: <ID , 5 >
Token: <ASSIGNMENT_OPERATOR , = >
Token: <NUMBER , 1 >
Token: <SEMI , ; >
Token: <KEYWORD , else if >
Token: <BRACKET , ( >
Token: <ID , 4 >
Token: <CONDITIONAL_OPERATOR , == >
Token: <MACRO , false >
Token: <BRACKET , ) >
Token: <ID , 5 >
Token: <ASSIGNMENT_OPERATOR , = >
Token: <NUMBER , 0 >
Token: <SEMI , ; >
Token: <CLOSE_PARENTHESIS , } >


Symbol Table:
entry:   0, symbol:          sum
entry:   1, symbol:            n
entry:   2, symbol:       square
entry:   3, symbol:          foo
entry:   4, symbol:       option
entry:   5, symbol:         flag
entry:   6, symbol:          num
entry:   7, symbol:       result
entry:   8, symbol:            i
entry:   9, symbol:            j
